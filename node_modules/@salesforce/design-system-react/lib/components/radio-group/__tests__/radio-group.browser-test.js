"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _chai = _interopRequireWildcard(require("chai"));

var _chaiEnzyme = _interopRequireDefault(require("chai-enzyme"));

var _enzyme = require("enzyme");

var _enzymeHelpers = require("../../../tests/enzyme-helpers");

var _radioGroup = _interopRequireDefault(require("../../radio-group"));

var _radio = _interopRequireDefault(require("../../radio-group/radio"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

_chai.default.use((0, _chaiEnzyme.default)());
/* Re-usable demo component.
 */


var RadioGroupExample =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RadioGroupExample, _React$Component);

  function RadioGroupExample(props) {
    var _this;

    _classCallCheck(this, RadioGroupExample);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RadioGroupExample).call(this, props));
    _this.state = {
      checked: 'Radio Label One'
    };
    return _this;
  }

  _createClass(RadioGroupExample, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var values = ['Radio Label One', 'Radio Label Two'];
      return _react.default.createElement(_radioGroup.default, {
        labels: this.props.labels,
        onChange: function onChange(event) {
          return _this2.setState({
            checked: event.target.value
          });
        },
        disabled: this.props.disabled,
        required: this.props.required
      }, values.map(function (value) {
        return _react.default.createElement(_radio.default, {
          key: value,
          label: value,
          value: value,
          checked: _this2.state.checked === value,
          variant: "base"
        });
      }));
    }
  }]);

  return RadioGroupExample;
}(_react.default.Component);

RadioGroupExample.propTypes = {
  labels: _propTypes.default.shape({
    error: _propTypes.default.string,
    label: _propTypes.default.string
  }),
  disabled: _propTypes.default.bool,
  required: _propTypes.default.bool
};
RadioGroupExample.defaultProps = {
  labels: {
    label: 'Radio Group Label'
  }
};
/* RadioGroup rendering tests
 */

describe('RadioGroup', function () {
  var _this3 = this;

  var mountNode;
  var wrapper;
  beforeEach(function () {
    mountNode = (0, _enzymeHelpers.createMountNode)({
      context: _this3
    });
  });
  afterEach(function () {
    (0, _enzymeHelpers.destroyMountNode)({
      wrapper: wrapper,
      mountNode: mountNode
    });
  });
  it('renders a radio group', function () {
    wrapper = (0, _enzyme.mount)(_react.default.createElement(RadioGroupExample, null), {
      attachTo: mountNode
    });
    var radios = wrapper.find(_radio.default);
    (0, _chai.expect)(radios).to.have.lengthOf(2, 'there are 2 radio inputs');
    radios.forEach(function (radioWrapper, index) {
      var radio = radios.get(index);
      (0, _chai.expect)(radio.props.checked).to.equal(radio.props.label === 'Radio Label One', 'the second radio input is checked');
    });
    var legend = wrapper.find('legend');
    (0, _chai.expect)(legend.text()).to.equal('Radio Group Label', 'there is a label');
  });
  it('renders a disabled state', function () {
    wrapper = (0, _enzyme.mount)(_react.default.createElement(RadioGroupExample, {
      disabled: true
    }), {
      attachTo: mountNode
    });
    var radios = wrapper.find(_radio.default);
    radios.forEach(function (radioWrapper, index) {
      var radio = radios.get(index);
      (0, _chai.expect)(radio.props.disabled, 'all radio inputs are disabled').to.be.true;
    });
  });
  it('renders a required indicator', function () {
    wrapper = (0, _enzyme.mount)(_react.default.createElement(RadioGroupExample, {
      required: true
    }), {
      attachTo: mountNode
    });
    var abbr = wrapper.find('abbr');
    (0, _chai.expect)(abbr.text()).to.equal('*', 'there is a required indicator');
  });
  it('triggers a change callback', function () {
    wrapper = (0, _enzyme.mount)(_react.default.createElement(RadioGroupExample, null), {
      attachTo: mountNode
    });
    var radio = wrapper.find({
      value: 'Radio Label Two'
    }).find('input');
    (0, _chai.expect)(radio).to.have.prop('checked', false);
    radio.simulate('change', {
      event: {
        target: 'Radio Label Two'
      }
    });
    radio = wrapper.find({
      value: 'Radio Label Two'
    }).find('input');
    (0, _chai.expect)(radio).to.have.prop('checked', true);
  });
});