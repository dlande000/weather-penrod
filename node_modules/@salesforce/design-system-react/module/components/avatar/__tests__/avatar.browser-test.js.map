{"version":3,"sources":["../../../../.tmp-es/components/avatar/__tests__/avatar.browser-test.jsx"],"names":["React","mount","chai","expect","chaiEnzyme","createMountNode","destroyMountNode","SLDSAvatar","IconSettings","use","describe","mountNode","wrapper","beforeEach","context","afterEach","it","expectedSrc","attachTo","img","find","src","prop","to","equal","avatar","be","present","circleClass","true","not","abbr","text","icon","span"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-render-return-value */\n/* eslint-disable react/no-find-dom-node */\n\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport chai, { expect } from 'chai';\nimport chaiEnzyme from 'chai-enzyme';\nimport {\n\tcreateMountNode,\n\tdestroyMountNode,\n} from '../../../tests/enzyme-helpers';\n\nimport SLDSAvatar from '../../avatar';\nimport IconSettings from '../../icon-settings';\n\nchai.use(chaiEnzyme());\n\ndescribe('SLDSAvatar: ', function() {\n\tlet mountNode;\n\tlet wrapper;\n\n\tdescribe('Default Structure', function() {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('avatar renders with image', () => {\n\t\t\tconst expectedSrc = 'assets/images/global-header/logo.svg';\n\t\t\twrapper = mount(<SLDSAvatar imgSrc={expectedSrc} />, {\n\t\t\t\tattachTo: mountNode,\n\t\t\t});\n\n\t\t\tconst img = wrapper.find('img');\n\t\t\tconst src = img.prop('src');\n\t\t\texpect(src).to.equal(expectedSrc);\n\t\t});\n\n\t\tit('renders proper icon size class', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar size=\"large\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\n\t\t\tconst avatar = wrapper.find('.slds-avatar_large');\n\t\t\texpect(avatar).to.be.present;\n\t\t});\n\n\t\tdescribe('variant is a user', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\twrapper = mount(\n\t\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t\t<SLDSAvatar variant=\"user\" />\n\t\t\t\t\t</IconSettings>,\n\t\t\t\t\t{ attachTo: mountNode }\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit('displays as a circle', () => {\n\t\t\t\tconst circleClass = !!wrapper.find('.slds-avatar_circle');\n\t\t\t\texpect(circleClass).to.be.true;\n\t\t\t});\n\t\t});\n\n\t\tdescribe('variant is an entity', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\twrapper = mount(\n\t\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t\t<SLDSAvatar variant=\"entity\" />\n\t\t\t\t\t</IconSettings>,\n\t\t\t\t\t{ attachTo: mountNode }\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit('displays as a square (no circle class)', () => {\n\t\t\t\tconst avatar = wrapper.find('.slds-avatar_circle');\n\t\t\t\texpect(avatar).to.not.be.present;\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('Initials avatar fallback check', () => {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('renders \"initials prop\" initials if they are passed in directly', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar initials=\"AW\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\n\t\t\tconst abbr = wrapper.find('abbr');\n\t\t\texpect(abbr.text()).to.equal('AW');\n\t\t});\n\n\t\tit('renders fallback initials abbr node if initials or label prop exists', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"test\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = !!wrapper.find('abbr');\n\t\t\texpect(abbr).to.be.true;\n\t\t});\n\n\t\tit('calls buildInitials in abbr node if no initials prop', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Jane Doe\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = wrapper.find('abbr');\n\t\t\texpect(abbr.text()).to.equal('JD');\n\t\t});\n\n\t\tit('renders first two letters of one word if label is one word', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Acme\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = wrapper.find('abbr');\n\t\t\texpect(abbr.text()).to.equal('Ac');\n\t\t});\n\n\t\tit('renders first letters of each word if label is two words', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Acme Communications\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = wrapper.find('abbr');\n\t\t\texpect(abbr.text()).to.equal('AC');\n\t\t});\n\n\t\tit('renders first letters of first and last word if label is more than two words', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Acme Communications Inc.\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = wrapper.find('abbr');\n\t\t\texpect(abbr.text()).to.equal('AI');\n\t\t});\n\t});\n\n\tdescribe('Icon avatar fallback check', () => {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('renders expected assistiveText', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar\n\t\t\t\t\t\tvariant=\"entity\"\n\t\t\t\t\t\tassistiveText={{ icon: 'entity icon avatar' }}\n\t\t\t\t\t/>\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst span = wrapper.find('.slds-assistive-text');\n\t\t\texpect(span.text()).to.equal('entity icon avatar');\n\t\t});\n\n\t\tit('renders account icon', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar variant=\"entity\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\texpect(wrapper.find('.slds-icon-standard-account')).to.be.present;\n\t\t});\n\n\t\tit('renders user icon', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar variant=\"user\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\texpect(wrapper.find('.slds-icon-standard-user')).to.be.present;\n\t\t});\n\t});\n});\n"],"file":"avatar.browser-test.js"}