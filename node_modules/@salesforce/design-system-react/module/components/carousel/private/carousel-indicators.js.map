{"version":3,"sources":["../../../../.tmp-es/components/carousel/private/carousel-indicators.jsx"],"names":["React","PropTypes","classnames","CAROUSEL_INDICATORS","CarouselIndicators","event","props","currentIndex","focus","onFocus","hasFocus","Array","noOfIndicators","keys","map","index","isSelectedPanel","indicatorActionClassName","className","assistiveText","title","items","length","startItemIndex","itemsPerPanel","autoIndicatorText","i","heading","margin","padding","component","carouselId","onBlur","onClick","Component","displayName","defaultProps","propTypes","string","oneOfType","array","object","number","bool","isRequired","func"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, \"a simple javascript utility for conditionally\n// joining classNames together.\"\nimport classnames from 'classnames';\n\nimport { CAROUSEL_INDICATORS } from '../../../utilities/constants';\n\n/**\n * CarouselIndicators is used to display the list of indicators associated to the number of panels\n * a carousel has\n */\nclass CarouselIndicators extends React.Component {\n\tcomponentDidUpdate() {\n\t\tif (this.props.hasFocus && this[`indicator${this.props.currentIndex}`]) {\n\t\t\tthis[`indicator${this.props.currentIndex}`].focus();\n\t\t}\n\t}\n\n\tonFocus = (event) => {\n\t\tthis[`indicator${this.props.currentIndex}`].focus();\n\t\tif (this.props.onFocus) {\n\t\t\tthis.props.onFocus(event);\n\t\t}\n\t};\n\n\trender() {\n\t\tconst { props } = this;\n\n\t\treturn (\n\t\t\t<ul\n\t\t\t\tclassName=\"slds-carousel__indicators slds-col slds-text-align_center\"\n\t\t\t\trole=\"tablist\"\n\t\t\t>\n\t\t\t\t{[...Array(props.noOfIndicators).keys()].map((index) => {\n\t\t\t\t\tconst isSelectedPanel = index === props.currentIndex;\n\t\t\t\t\tconst indicatorActionClassName = classnames(\n\t\t\t\t\t\t'slds-carousel__indicator-action',\n\t\t\t\t\t\tprops.className,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'slds-is-active': isSelectedPanel,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tlet assistiveText = `${index}`;\n\t\t\t\t\tlet title = `${index}`;\n\n\t\t\t\t\tif (props.items && props.items.length > 0) {\n\t\t\t\t\t\tconst startItemIndex = index * props.itemsPerPanel;\n\t\t\t\t\t\tlet autoIndicatorText = '';\n\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tlet i = startItemIndex;\n\t\t\t\t\t\t\ti < startItemIndex + props.itemsPerPanel;\n\t\t\t\t\t\t\ti++\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (props.items[i] && props.items[i].heading) {\n\t\t\t\t\t\t\t\tautoIndicatorText = !autoIndicatorText\n\t\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t\t: `${autoIndicatorText}, `;\n\t\t\t\t\t\t\t\tautoIndicatorText += props.items[i].heading;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (autoIndicatorText) {\n\t\t\t\t\t\t\tassistiveText = autoIndicatorText;\n\t\t\t\t\t\t\ttitle = autoIndicatorText;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName=\"slds-carousel__indicator slds-m-horizontal_xx-small\"\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\trole=\"presentation\"\n\t\t\t\t\t\t\tstyle={{ margin: 0, padding: '0 8px' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tref={(component) => {\n\t\t\t\t\t\t\t\t\tthis[`indicator${index}`] = component;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tid={`indicator-id-${props.carouselId}-${index}`}\n\t\t\t\t\t\t\t\tclassName={indicatorActionClassName}\n\t\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\t\ttabIndex={isSelectedPanel ? '0' : '-1'}\n\t\t\t\t\t\t\t\taria-selected={isSelectedPanel}\n\t\t\t\t\t\t\t\taria-controls={`panel-${index}`}\n\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\t\t\t\tonClick={(event) => props.onClick(event, index)}\n\t\t\t\t\t\t\t\tonFocus={this.onFocus}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className=\"slds-assistive-text\">{assistiveText}</span>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t);\n\t}\n}\n\nCarouselIndicators.displayName = CAROUSEL_INDICATORS;\n\nCarouselIndicators.defaultProps = {\n\tcurrentIndex: 0,\n};\n\n// ### Prop Types\nCarouselIndicators.propTypes = {\n\t/**\n\t * Carousel HTML ID\n\t */\n\tcarouselId: PropTypes.string,\n\t/**\n\t * CSS classes that are applied to the component\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Selected indicator\n\t */\n\tcurrentIndex: PropTypes.number,\n\t/**\n\t * Passed from carousel parent state, dictates if indicator currently has focus\n\t */\n\thasFocus: PropTypes.bool,\n\t/**\n\t * Array of objects with shape, needed for building a carousel items\n\t */\n\titems: PropTypes.array,\n\t/**\n\t * Number of items to be displayed at a time in the carousel\n\t */\n\titemsPerPanel: PropTypes.number,\n\t/**\n\t * Number of indicators to be displayed (corresponds to the number of panels in the carousel)\n\t */\n\tnoOfIndicators: PropTypes.number.isRequired,\n\t/**\n\t * Fires on indicator blur, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * Triggered when the indicator is clicked.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Fires on indicator focus, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n\t */\n\tonFocus: PropTypes.func,\n};\n\nexport default CarouselIndicators;\n"],"file":"carousel-indicators.js"}