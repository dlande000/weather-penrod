{"version":3,"sources":["../../../.tmp-es/components/spinner/index.jsx"],"names":["React","PropTypes","classNames","checkProps","SPINNER","componentDoc","propTypes","assistiveText","shape","label","string","containerClassName","id","isDelayed","bool","isInput","size","oneOf","variant","defaultProps","Spinner","props","spinnerClassName","displayName"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Spinner Component --- SLDS for React\n\n// Implements the [Spinner design pattern - 2.1.0-beta.3 (204)](https://latest-204.lightningdesignsystem.com/components/spinners) in React.\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nimport checkProps from './check-props';\n\n// ## Constants\nimport { SPINNER } from '../../utilities/constants';\n\nimport componentDoc from './docs.json';\n\n// ### Prop Types\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `label`: Assistive text that is read out loud to screen readers.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Custom css classes applied to Spinner container\n\t */\n\tcontainerClassName: PropTypes.string,\n\t/**\n\t * Unique html id placed on div with role=\"status\".\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Adds delay of 300ms to the spinner\n\t */\n\tisDelayed: PropTypes.bool,\n\t/**\n\t * Add styling to support a spinner inside an input field.\n\t */\n\tisInput: PropTypes.bool,\n\t/**\n\t * Determines the size of the spinner\n\t */\n\tsize: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n\t/**\n\t * Determines the color of the spinner: `base` is gray, `brand` is blue, and `inverse` is white.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'brand', 'inverse']),\n};\n\nconst defaultProps = {\n\tassistiveText: { label: 'Loading...' },\n\tisDelayed: false,\n\tsize: 'medium',\n\tvariant: 'base',\n};\n\n/**\n * Spinners are CSS loading indicators that should be shown when retrieving data or performing slow computations. In some cases, the first time a parent component loads, a stencil is preferred to indicate network activity.\n */\nconst Spinner = (props) => {\n\tcheckProps(SPINNER, props, componentDoc);\n\tconst { containerClassName, id, isDelayed, isInput, size, variant } = props;\n\tconst assistiveText =\n\t\ttypeof props.assistiveText === 'string'\n\t\t\t? props.assistiveText\n\t\t\t: {\n\t\t\t\t\t...defaultProps.assistiveText,\n\t\t\t\t\t...props.assistiveText,\n\t\t\t\t}.label;\n\n\tconst spinnerClassName = classNames('slds-spinner', {\n\t\t'slds-input__spinner': isInput,\n\t\t'slds-spinner_brand': variant === 'brand',\n\t\t'slds-spinner_inverse': variant === 'inverse',\n\t\t'slds-spinner_delayed': isDelayed,\n\t\t[`slds-spinner_${size}`]: size,\n\t});\n\n\treturn (\n\t\t<div className={classNames(containerClassName, 'slds-spinner_container')}>\n\t\t\t<div\n\t\t\t\taria-hidden=\"false\"\n\t\t\t\tclassName={spinnerClassName}\n\t\t\t\tid={id}\n\t\t\t\trole=\"status\"\n\t\t\t>\n\t\t\t\t{assistiveText && (\n\t\t\t\t\t<span className=\"slds-assistive-text\">{assistiveText}</span>\n\t\t\t\t)}\n\t\t\t\t<div className=\"slds-spinner__dot-a\" />\n\t\t\t\t<div className=\"slds-spinner__dot-b\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nSpinner.displayName = SPINNER;\nSpinner.propTypes = propTypes;\nSpinner.defaultProps = defaultProps;\n\nexport default Spinner;\n"],"file":"index.js"}