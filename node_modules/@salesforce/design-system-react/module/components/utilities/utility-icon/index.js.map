{"version":3,"sources":["../../../../.tmp-es/components/utilities/utility-icon/index.jsx"],"names":["React","PropTypes","checkProps","Svg","SLDS_ICONS_UTILITY","SLDS_ICONS_ACTION","SLDS_ICONS_CUSTOM","SLDS_ICONS_DOCTYPE","SLDS_ICONS_STANDARD","UtilityIcon","context","name","assistiveText","category","icon","path","rest","inlineIcons","action","custom","doctype","standard","utility","inlineData","Object","keys","length","toLowerCase","viewBox","modifiedPath","onRequestIconPath","iconPath","displayName","propTypes","object","oneOf","string","defaultProps","contextTypes","func","actionSprite","customSprite","doctypeSprite","standardSprite","utilitySprite"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\nimport Svg from './svg';\n\nimport SLDS_ICONS_UTILITY from '../../../icons/utility';\nimport SLDS_ICONS_ACTION from '../../../icons/action';\nimport SLDS_ICONS_CUSTOM from '../../../icons/custom';\nimport SLDS_ICONS_DOCTYPE from '../../../icons/doctype';\nimport SLDS_ICONS_STANDARD from '../../../icons/standard';\n\n/*\n * If inline icons are present and icon bundle imports are not just an empty object, then inline icons will be used instead of external icons that require HTTP access.\n */\nconst UtilityIcon = (\n\t{\n\t\tname = '',\n\t\tassistiveText, // eslint-disable-line no-unused-vars\n\t\tcategory,\n\t\ticon,\n\t\tpath,\n\t\t...rest\n\t},\n\tcontext\n) => {\n\tcheckProps('UtilityIcon', { name, category, path, context });\n\n\tconst inlineIcons = {\n\t\taction: SLDS_ICONS_ACTION,\n\t\tcustom: SLDS_ICONS_CUSTOM,\n\t\tdoctype: SLDS_ICONS_DOCTYPE,\n\t\tstandard: SLDS_ICONS_STANDARD,\n\t\tutility: SLDS_ICONS_UTILITY,\n\t};\n\tlet inlineData;\n\n\tif (icon) {\n\t\t// Use SVG data passed in with `icon` prop\n\t\tinlineData = icon;\n\t} else if (Object.keys(inlineIcons[category]).length) {\n\t\t// Use inline icon data if it exists. ENV variables will have to set to allow this.\n\t\tinlineData = inlineIcons[category][name.toLowerCase()];\n\t\tinlineData.viewBox = inlineIcons[category].viewBox;\n\t}\n\n\tlet modifiedPath;\n\n\tif (path) {\n\t\t// Use `path` prop of Icon if present\n\t\tmodifiedPath = path;\n\t} else if (context.onRequestIconPath) {\n\t\tmodifiedPath = context.onRequestIconPath({ category, name });\n\t} else if (context[`${category}Sprite`]) {\n\t\t// Use category sprite file from IconSettings if present\n\t\tmodifiedPath = `${context[`${category}Sprite`]}#${name}`;\n\t} else {\n\t\t// Otherwise, use external URLs for icons\n\t\tmodifiedPath =\n\t\t\tcontext.iconPath &&\n\t\t\t`${context.iconPath}/${category}-sprite/svg/symbols.svg#${name}`;\n\t}\n\n\treturn inlineData ? (\n\t\t<Svg data={inlineData} name={name} {...rest} />\n\t) : (\n\t\t<svg key={`${name}_${category}`} {...rest}>\n\t\t\t<use xlinkHref={modifiedPath} />\n\t\t</svg>\n\t);\n};\n\nUtilityIcon.displayName = 'UtilityIcon';\n\nUtilityIcon.propTypes = {\n\tassistiveText: PropTypes.object,\n\tcategory: PropTypes.oneOf([\n\t\t'action',\n\t\t'custom',\n\t\t'doctype',\n\t\t'standard',\n\t\t'utility',\n\t]),\n\t/**\n\t * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples\n\t */\n\ticon: PropTypes.object,\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings.\n\t */\n\tpath: PropTypes.string,\n};\n\nUtilityIcon.defaultProps = {\n\tcategory: 'utility',\n};\n\nUtilityIcon.contextTypes = {\n\ticonPath: PropTypes.string,\n\tonRequestIconPath: PropTypes.func,\n\tactionSprite: PropTypes.string,\n\tcustomSprite: PropTypes.string,\n\tdoctypeSprite: PropTypes.string,\n\tstandardSprite: PropTypes.string,\n\tutilitySprite: PropTypes.string,\n};\n\nexport default UtilityIcon;\n"],"file":"index.js"}