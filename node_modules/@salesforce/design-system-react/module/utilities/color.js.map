{"version":3,"sources":["../../.tmp-es/utilities/color.js"],"names":["assign","HEX_REGEX","ColorUtils","getNewColor","options","customHexValidator","oldColor","hex","isValidHex","errors","hsv","hue","saturation","value","rgb","red","green","blue","getHsvFromHex","getRgbFromHex","getRgbErrors","Object","values","includes","getHexFromRgb","getHsvFromRgb","getHexFromHsv","getRgbFromHsv","getDeltaColor","limitValue","Math","min","max","test","toSixDigitHex","hasError","isNaN","floor","Number","entries","reduce","keyValue","redRatio","greenRatio","blueRatio","delta","hueRatio","satRatio","valRatio","i","f","p","q","t","round","getHex","color","toString","substr","result","exec","parseInt","shortHandHex","match"],"mappings":"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","sourcesContent":["import assign from 'lodash.assign';\n\nconst HEX_REGEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\nconst ColorUtils = {\n\tgetNewColor(options, customHexValidator, oldColor = {}) {\n\t\tif (options.hex) {\n\t\t\tif (\n\t\t\t\tcustomHexValidator\n\t\t\t\t\t? !customHexValidator(options.hex)\n\t\t\t\t\t: !this.isValidHex(options.hex)\n\t\t\t) {\n\t\t\t\treturn assign({}, oldColor, {\n\t\t\t\t\thex: options.hex,\n\t\t\t\t\terrors: assign({}, oldColor && oldColor.errors, {\n\t\t\t\t\t\thex: true,\n\t\t\t\t\t}),\n\t\t\t\t\thsv: {\n\t\t\t\t\t\thue: '',\n\t\t\t\t\t\tsaturation: '',\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t},\n\t\t\t\t\trgb: {\n\t\t\t\t\t\tred: '',\n\t\t\t\t\t\tgreen: '',\n\t\t\t\t\t\tblue: '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\thex: options.hex,\n\t\t\t\thsv: this.getHsvFromHex(options.hex),\n\t\t\t\trgb: this.getRgbFromHex(options.hex),\n\t\t\t};\n\t\t}\n\n\t\tif ('red' in options || 'blue' in options || 'green' in options) {\n\t\t\tconst rgb = assign({}, oldColor.rgb, options);\n\t\t\tconst errors = this.getRgbErrors(rgb);\n\n\t\t\tif (Object.values(errors).includes(true)) {\n\t\t\t\treturn assign({}, oldColor, {\n\t\t\t\t\trgb,\n\t\t\t\t\terrors: assign({}, oldColor && oldColor.errors, errors),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\thex: this.getHexFromRgb(rgb),\n\t\t\t\thsv: this.getHsvFromRgb(rgb),\n\t\t\t\trgb,\n\t\t\t};\n\t\t}\n\n\t\tif ('hue' in options || 'saturation' in options || 'value' in options) {\n\t\t\tconst hsv = assign({}, oldColor.hsv, options);\n\t\t\treturn {\n\t\t\t\thex: this.getHexFromHsv(hsv),\n\t\t\t\thsv,\n\t\t\t\trgb: this.getRgbFromHsv(hsv),\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\thex: '',\n\t\t\thsv: {\n\t\t\t\thue: '',\n\t\t\t\tsaturation: '',\n\t\t\t\tvalue: '',\n\t\t\t},\n\t\t\trgb: {\n\t\t\t\tred: '',\n\t\t\t\tgreen: '',\n\t\t\t\tblue: '',\n\t\t\t},\n\t\t};\n\t},\n\n\tgetDeltaColor(options, customHexValidator, oldColor) {\n\t\tconst limitValue = (value) => Math.min(Math.max(value, 0), 100);\n\n\t\treturn this.getNewColor(\n\t\t\t{\n\t\t\t\tsaturation: limitValue(\n\t\t\t\t\toldColor.hsv.saturation + (options.saturation || 0)\n\t\t\t\t),\n\t\t\t\tvalue: limitValue(oldColor.hsv.value + (options.value || 0)),\n\t\t\t},\n\t\t\tcustomHexValidator,\n\t\t\toldColor\n\t\t);\n\t},\n\n\tisValidHex(value) {\n\t\treturn !value || HEX_REGEX.test(this.toSixDigitHex(value));\n\t},\n\n\tgetRgbErrors(rgb) {\n\t\tconst hasError = (value) =>\n\t\t\tisNaN(value) ||\n\t\t\tMath.floor(value) !== Number(value) ||\n\t\t\tvalue < 0 ||\n\t\t\tvalue >= 256;\n\n\t\treturn Object.entries(rgb).reduce((errors, keyValue) => {\n\t\t\terrors[keyValue[0]] = hasError(keyValue[1]);\n\t\t\treturn errors;\n\t\t}, {});\n\t},\n\n\tgetHsvFromHex(hex) {\n\t\treturn this.getHsvFromRgb(this.getRgbFromHex(hex));\n\t},\n\n\tgetHexFromHsv({ hue, saturation, value }) {\n\t\treturn this.getHexFromRgb(this.getRgbFromHsv({ hue, saturation, value }));\n\t},\n\n\tgetHsvFromRgb({ red, green, blue }) {\n\t\tconst redRatio = red / 255;\n\t\tconst greenRatio = green / 255;\n\t\tconst blueRatio = blue / 255;\n\n\t\tconst max = Math.max(redRatio, greenRatio, blueRatio);\n\t\tconst min = Math.min(redRatio, greenRatio, blueRatio);\n\n\t\tconst delta = max - min;\n\t\tconst saturation = max === 0 ? 0 : delta / max * 100;\n\t\tconst value = max * 100;\n\t\tlet hue;\n\n\t\tif (max === min) {\n\t\t\thue = 0;\n\t\t} else {\n\t\t\tif (redRatio === max) {\n\t\t\t\thue =\n\t\t\t\t\t(greenRatio - blueRatio) / delta + (greenRatio < blueRatio ? 6 : 0);\n\t\t\t} else if (greenRatio === max) {\n\t\t\t\thue = (blueRatio - redRatio) / delta + 2;\n\t\t\t} else {\n\t\t\t\thue = (redRatio - greenRatio) / delta + 4;\n\t\t\t}\n\n\t\t\thue *= 60;\n\t\t}\n\n\t\treturn { hue, saturation, value };\n\t},\n\n\tgetRgbFromHsv({ hue, saturation, value }) {\n\t\tconst hueRatio = hue / 360;\n\t\tconst satRatio = saturation / 100;\n\t\tconst valRatio = value / 100;\n\n\t\tlet red;\n\t\tlet green;\n\t\tlet blue;\n\n\t\tconst i = Math.floor(hueRatio * 6);\n\t\tconst f = hueRatio * 6 - i;\n\t\tconst p = valRatio * (1 - satRatio);\n\t\tconst q = valRatio * (1 - f * satRatio);\n\t\tconst t = valRatio * (1 - (1 - f) * satRatio);\n\n\t\tswitch (i % 6) {\n\t\t\tcase 0:\n\t\t\t\tred = valRatio;\n\t\t\t\tgreen = t;\n\t\t\t\tblue = p;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tred = q;\n\t\t\t\tgreen = valRatio;\n\t\t\t\tblue = p;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tred = p;\n\t\t\t\tgreen = valRatio;\n\t\t\t\tblue = t;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tred = p;\n\t\t\t\tgreen = q;\n\t\t\t\tblue = valRatio;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tred = t;\n\t\t\t\tgreen = p;\n\t\t\t\tblue = valRatio;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tred = valRatio;\n\t\t\t\tgreen = p;\n\t\t\t\tblue = q;\n\t\t}\n\n\t\treturn {\n\t\t\tred: Math.round(red * 255),\n\t\t\tblue: Math.round(blue * 255),\n\t\t\tgreen: Math.round(green * 255),\n\t\t};\n\t},\n\n\tgetHexFromRgb({ red, green, blue }) {\n\t\tfunction getHex(color) {\n\t\t\treturn `0${Math.round(color).toString(16)}`.substr(-2);\n\t\t}\n\t\treturn `#${getHex(red)}${getHex(green)}${getHex(blue)}`;\n\t},\n\n\tgetRgbFromHex(hex) {\n\t\tconst result = HEX_REGEX.exec(this.toSixDigitHex(hex));\n\t\treturn {\n\t\t\tred: parseInt(result[1], 16),\n\t\t\tgreen: parseInt(result[2], 16),\n\t\t\tblue: parseInt(result[3], 16),\n\t\t};\n\t},\n\n\ttoSixDigitHex(value) {\n\t\tconst shortHandHex = /^#([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\t\tconst match = shortHandHex.exec(value);\n\t\tif (match) {\n\t\t\treturn `#${match[1]}${match[1]}${match[2]}${match[2]}${match[3]}${\n\t\t\t\tmatch[3]\n\t\t\t}`;\n\t\t}\n\n\t\treturn value;\n\t},\n};\n\nexport default ColorUtils;\n"],"file":"color.js"}